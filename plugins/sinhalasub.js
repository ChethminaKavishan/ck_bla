const { cmd } = require('../command');
const { fetchJson } = require('../lib/functions');
const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const config = require('../config');

const API_URL = "https://api.skymansion.site/movies-dl/search";
const DOWNLOAD_URL = "https://api.skymansion.site/movies-dl/download";
const API_KEY = config.MOVIE_API_KEY;

let movieSelections = {};
let qualitySelections = {};

// Function to convert text into stylish font
function toStylishFont(text) {
    const normal = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    const stylish = "·¥¨·¥Æ·∂ú·¥∞·¥±·∂†·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æ·µ†·¥øÀ¢·µÄ·µÅ‚±Ω·µÇÀ£ ∏·∂ª·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñ·µ† ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª";
    return text.split("").map(c => {
        let index = normal.indexOf(c);
        return index !== -1 ? stylish[index] : c;
    }).join("");
}

// Movie search command
cmd({
    pattern: "sinhalasub",
    alias: ["moviedl", "films"],
    react: 'üé¨',
    category: "movie",
    desc: "HIRAN MD MOVIE DOWNLOADER",
    filename: __filename
}, async (robin, m, mek, { from, q, reply }) => {
    try {
        if (!q || q.trim() === '') return await reply('‚ùå Please provide a movie name! (e.g., Deadpool)');

        const searchUrl = `${API_URL}?query=${encodeURIComponent(q)}&apikey=${API_KEY}`;
        let response = await fetchJson(searchUrl);

        if (!response || !response.results || response.results.length === 0) {
            return await reply(`‚ùå No results found for: *${q}*`);
        }

        let moviesList = response.results.slice(0, 5); 
        let message = `üé¨ *HIRAN MD MOVIE DOWNLOADER*\n\nüîé *Search Results for:* ${q}\n\n`;
        moviesList.forEach((movie, index) => {
            message += `*${index + 1}.* ${movie.title} (${movie.year})\n`;
        });
        message += `\nüí¨ *Reply with a number (1-${moviesList.length}) to choose a movie.*\n\n${config.FOOTER || '‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú'}`;

        movieSelections[from] = { moviesList, mek }; 
        await reply(message);
    } catch (error) {
        console.error('Error in movie command:', error);
        await reply('‚ùå Something went wrong. Please try again later.');
    }
});

// Handle movie selection
cmd({
    onMessage: true
}, async (robin, m, mek, { from, body, reply }) => {
    if (movieSelections[from] && /^[1-5]$/.test(body.trim())) {
        let { moviesList, mek: originalMek } = movieSelections[from];
        let movieIndex = parseInt(body.trim()) - 1;
        let selectedMovie = moviesList[movieIndex];

        if (!selectedMovie) return;

        const detailsUrl = `${DOWNLOAD_URL}?id=${selectedMovie.id}&apikey=${API_KEY}`;
        let detailsResponse = await fetchJson(detailsUrl);

        if (!detailsResponse || !detailsResponse.links || detailsResponse.links.length === 0) {
            delete movieSelections[from];
            return await reply('‚ùå No download links found for this movie.');
        }

        let availableLinks = detailsResponse.links;
        let message = `üé¨ *${selectedMovie.title}*\nüóì Year: ${selectedMovie.year}\nüì∫ Genres: ${selectedMovie.genres.join(', ')}\n\nüìå *Choose Quality:*\n\n`;
        availableLinks.forEach((link, index) => {
            message += `*${index + 1}.* ${link.quality} - ${link.size}MB\n`;
        });
        message += `\nüí¨ *Reply with a number (1-${availableLinks.length}) to select quality.*\n\n${config.FOOTER || '‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú'}`;

        qualitySelections[from] = { availableLinks, selectedMovie, mek: originalMek };
        delete movieSelections[from];

        await robin.sendMessage(from, {
            image: { url: selectedMovie.poster }, 
            caption: message,
            quoted: originalMek
        });
    }
});

// Handle quality selection & start download
cmd({
    onMessage: true
}, async (robin, m, mek, { from, body, reply }) => {
    if (qualitySelections[from] && /^[1-5]$/.test(body.trim())) {
        let { availableLinks, selectedMovie, mek: originalMek } = qualitySelections[from];
        let qualityIndex = parseInt(body.trim()) - 1;
        let selectedDownload = availableLinks[qualityIndex];

        if (!selectedDownload || !selectedDownload.url.startsWith('http')) {
            delete qualitySelections[from];
            return await reply('‚ùå No valid download link available.');
        }

        const fileId = selectedDownload.url.split('/').pop();
        const directDownloadLink = `https://pixeldrain.com/api/file/${fileId}?download`;

        const stylishTitle = toStylishFont(selectedMovie.title);
        const fileName = ` ú…™ Ä·¥Ä…¥ ·¥ç·¥è·¥†…™·¥á ·¥Ö ü | ${stylishTitle} - ${selectedDownload.quality}.mp4`;
        const filePath = path.join(__dirname, fileName);
        const writer = fs.createWriteStream(filePath);
        
        const { data } = await axios({
            url: directDownloadLink,
            method: 'GET',
            responseType: 'stream'
        });

        data.pipe(writer);

        writer.on('finish', async () => {
            await robin.sendMessage(from, {
                document: fs.readFileSync(filePath),
                mimetype: 'video/mp4',
                fileName: fileName,
                caption: `üé¨ *${stylishTitle}*\nüìå Quality: ${selectedDownload.quality}\n‚úÖ *Download Complete!*\n\n${config.FOOTER || '‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú'}`,
                thumbnail: { url: selectedMovie.poster },
                quoted: originalMek 
            });
            fs.unlinkSync(filePath);
        });

        writer.on('error', async (err) => {
            console.error('Download Error:', err);
            await reply('‚ùå Failed to download movie. Please try again.');
        });

        delete qualitySelections[from];
    }
});
