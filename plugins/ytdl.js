const config = require('../config');
const { cmd } = require('../command');
const DY_SCRAP = require('@dark-yasiya/scrap');
const dy_scrap = new DY_SCRAP();

// Function to extract YouTube Video ID from URL
function extractYouTubeID(url) {
    const regex = /(?:youtube\.com\/(?:.*v=|.*\/)|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/;
    return url.match(regex)?.[1] || null;
}

// YouTube Song Download Command
cmd({
    pattern: "song",
    alias: ["ytmp3", "ytmp3dl"],
    react: "üé∂",
    desc: "Download Ytmp3",
    category: "download",
    use: ".song <Text or YT URL>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return await reply("‚ùå Please provide a Query or YouTube URL!");

        let id = q.startsWith("https://") ? extractYouTubeID(q) : null;
        if (!id) {
            const searchResults = await dy_scrap.ytsearch(q);
            if (!searchResults?.results?.length) return await reply("‚ùå No results found!");
            id = searchResults.results[0].videoId;
        }

        const searchData = await dy_scrap.ytsearch(`https://youtube.com/watch?v=${id}`);
        if (!searchData?.results?.length) return await reply("‚ùå Failed to fetch video!");

        const { url, title, image, timestamp, ago, views, author } = searchData.results[0];

        let info = ` * ú…™ Ä·¥Ä…¥ ·¥ç·¥Ö Íú±·¥è…¥…¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä* \n\n` +
            ` *ùêìùêàùêìùêãùêÑ :* ${title || "Unknown"}\n` +
            ` *ùêÉùêîùêëùêÄùêìùêàùêéùêç :* ${timestamp || "Unknown"}\n` +
            ` *ùêïùêàùêÑùêñùêí :* ${views || "Unknown"}\n` +
            ` *ùêëùêÑùêãùêÑùêÄùêíùêÑ ùêÉùêÄùêìùêÑ :* ${ago || "Unknown"}\n` +
            ` *ùêÄùêîùêìùêáùêéùêë :* ${author?.name || "Unknown"}\n` +
            ` *ùêîùêëùêã :* ${url || "Unknown"}\n\n` +
            ` *ùöÅùô¥ùôøùôªùöà ùöÜùô∏ùöÉùô∑ ùöàùôæùöÑùöÅ ùô≤ùô∑ùôæùô∏ùô≤ùô¥:*\n` +
            `*>>‚Ä¢1.1* *Audio Type* üéµ\n` +
            `*>>‚Ä¢1.2* *Document Type* üìÅ\n\n` +
            `${config.FOOTER || "```‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú```"}`;

        const sentMsg = await conn.sendMessage(from, { image: { url: image }, caption: info }, { quoted: mek });
        const messageID = sentMsg.key.id;
        await conn.sendMessage(from, { react: { text: 'üé∂', key: sentMsg.key } });

        // Listen for a single response
        conn.ev.once('messages.upsert', async (messageUpdate) => {
            try {
                const mekInfo = messageUpdate?.messages[0];
                if (!mekInfo?.message) return;

                const userReply = (mekInfo?.message?.conversation || mekInfo?.message?.extendedTextMessage?.text || "").trim();
                const isReplyToSentMsg = mekInfo?.message?.extendedTextMessage?.contextInfo?.stanzaId === messageID;

                if (!isReplyToSentMsg) return;

                let response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                let downloadUrl = response?.result?.download?.url;
                if (!downloadUrl) return await reply("‚ùå Download link not found!");

                let msg = await conn.sendMessage(from, { text: "‚è≥ Downloading Your Song..." }, { quoted: mek });

                let sendData;
                if (userReply === "1.1") {
                    sendData = { audio: { url: downloadUrl }, mimetype: "audio/mpeg" };
                } else if (userReply === "1.2") {
                    sendData = { document: { url: downloadUrl }, fileName: `${title}.mp3`, mimetype: "audio/mpeg", caption: `‚Ä¢ Powered by HIRAN MD` };
                } else {
                    return await reply("‚ùå Invalid choice! Reply with 1Ô∏è‚É£.1Ô∏è‚É£ or 1Ô∏è‚É£.2Ô∏è‚É£.");
                }

                await conn.sendMessage(from, sendData, { quoted: mek });
                await conn.sendMessage(from, { text: 'This Song Brought for you by HIRAN MD‚úÖ', edit: msg.key });

            } catch (error) {
                console.error(error);
                await reply(`‚ùå *An error occurred while processing:* ${error.message || "Error!"}`);
            }
        });

    } catch (error) {
        console.error(error);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        await reply(`‚ùå *An error occurred:* ${error.message || "Error!"}`);
    }
});

// YouTube Video Download Command
cmd({
    pattern: "video",
    alias: ["ytmp4", "ytvideo"],
    react: "üé¨",
    desc: "Download Ytmp4",
    category: "download",
    use: ".video <Text or YT URL>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return await reply("‚ùå Please provide a Query or YouTube URL!");

        let id = q.startsWith("https://") ? extractYouTubeID(q) : null;
        if (!id) {
            const searchResults = await dy_scrap.ytsearch(q);
            if (!searchResults?.results?.length) return await reply("‚ùå No results found!");
            id = searchResults.results[0].videoId;
        }

        const searchData = await dy_scrap.ytsearch(`https://youtube.com/watch?v=${id}`);
        if (!searchData?.results?.length) return await reply("‚ùå Failed to fetch video!");

        const { url, title, image, timestamp, ago, views, author } = searchData.results[0];

        let info = ` * ú…™ Ä·¥Ä…¥ ·¥ç·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä* \n\n` +
            ` *ùêìùêàùêìùêãùêÑ :* ${title || "Unknown"}\n` +
            ` *ùêÉùêîùêëùêÄùêìùêàùêéùêç :* ${timestamp || "Unknown"}\n` +
            ` *ùêïùêàùêÑùêñùêí :* ${views || "Unknown"}\n` +
            ` *ùêëùêÑùêãùêÑùêÄùêíùêÑ ùêÉùêÄùêìùêÑ :* ${ago || "Unknown"}\n` +
            ` *ùêÄùêîùêìùêáùêéùêë :* ${author?.name || "Unknown"}\n` +
            ` *ùêîùêëùêã :* ${url || "Unknown"}\n\n` +
            ` *ùöÅùô¥ùôøùôªùöà ùöÜùô∏ùöÉùô∑ ùöàùôæùöÑùöÅ ùô≤ùô∑ùôæùô∏ùô≤ùô¥:*\n` +
            `*>>‚Ä¢1.1* *360p* üñ•Ô∏è\n` +
            `*>>‚Ä¢1.2* *480p* üì±\n` +
            `*>>‚Ä¢1.3* *720p* üé•\n\n` +
            `${config.FOOTER || "```‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú```"}`;

        const sentMsg = await conn.sendMessage(from, { image: { url: image }, caption: info }, { quoted: mek });
        const messageID = sentMsg.key.id;
        await conn.sendMessage(from, { react: { text: 'üé¨', key: sentMsg.key } });

        // Listen for a single response
        conn.ev.once('messages.upsert', async (messageUpdate) => {
            try {
                const mekInfo = messageUpdate?.messages[0];
                if (!mekInfo?.message) return;

                const userReply = (mekInfo?.message?.conversation || mekInfo?.message?.extendedTextMessage?.text || "").trim();
                const isReplyToSentMsg = mekInfo?.message?.extendedTextMessage?.contextInfo?.stanzaId === messageID;

                if (!isReplyToSentMsg) return;

                let response = await dy_scrap.ytmp4(`https://youtube.com/watch?v=${id}`);
                let downloadUrl = response?.result?.download?.url;
                if (!downloadUrl) return await reply("‚ùå Download link not found!");

                let msg = await conn.sendMessage(from, { text: "‚è≥ Downloading Your Video..." }, { quoted: mek });

                let sendData;
                if (userReply === "1.1") {
                    sendData = { video: { url: downloadUrl }, mimetype: "video/mp4" , caption:```‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú```};
                } else if (userReply === "1.2") {
                    sendData = { video: { url: downloadUrl }, mimetype: "video/mp4", caption: ````‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú```` };
                } else if (userReply === "1.3") {
                    sendData = { video: { url: downloadUrl }, mimetype: "video/mp4", caption: ````‚Ä¢ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ú…™ Ä·¥ú·¥°·¥Ä ·¥õ·¥á·¥Ñ ú```` };
                } else {
                    return await reply("‚ùå Invalid choice! Reply with 1Ô∏è‚É£.1Ô∏è‚É£, 1Ô∏è‚É£.2Ô∏è‚É£, or 1Ô∏è‚É£.3Ô∏è‚É£.");
                }

                await conn.sendMessage(from, sendData, { quoted: mek });
                await conn.sendMessage(from, { text: 'This Video Brought for You by HIRAN-MD ‚úÖ', edit: msg.key });

            } catch (error) {
                console.error(error);
                await reply(`‚ùå *An error occurred while processing:* ${error.message || "Error!"}`);
            }
        });

    } catch (error) {
        console.error(error);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        await reply(`‚ùå *An error occurred:* ${error.message || "Error!"}`);
    }
});
